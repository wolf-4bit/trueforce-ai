/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as AuthImport } from './routes/auth'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardReportsImport } from './routes/dashboard/reports'
import { Route as DashboardPeopleImport } from './routes/dashboard/people'
import { Route as DashboardEvidenceManagementImport } from './routes/dashboard/evidence-management'
import { Route as DashboardDashboardImport } from './routes/dashboard/dashboard'
import { Route as DashboardChatImport } from './routes/dashboard/chat'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardReportsRoute = DashboardReportsImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardPeopleRoute = DashboardPeopleImport.update({
  id: '/people',
  path: '/people',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardEvidenceManagementRoute =
  DashboardEvidenceManagementImport.update({
    id: '/evidence-management',
    path: '/evidence-management',
    getParentRoute: () => DashboardRoute,
  } as any)

const DashboardDashboardRoute = DashboardDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardChatRoute = DashboardChatImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => DashboardRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/chat': {
      id: '/dashboard/chat'
      path: '/chat'
      fullPath: '/dashboard/chat'
      preLoaderRoute: typeof DashboardChatImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/dashboard': {
      id: '/dashboard/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard/dashboard'
      preLoaderRoute: typeof DashboardDashboardImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/evidence-management': {
      id: '/dashboard/evidence-management'
      path: '/evidence-management'
      fullPath: '/dashboard/evidence-management'
      preLoaderRoute: typeof DashboardEvidenceManagementImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/people': {
      id: '/dashboard/people'
      path: '/people'
      fullPath: '/dashboard/people'
      preLoaderRoute: typeof DashboardPeopleImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/reports': {
      id: '/dashboard/reports'
      path: '/reports'
      fullPath: '/dashboard/reports'
      preLoaderRoute: typeof DashboardReportsImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardChatRoute: typeof DashboardChatRoute
  DashboardDashboardRoute: typeof DashboardDashboardRoute
  DashboardEvidenceManagementRoute: typeof DashboardEvidenceManagementRoute
  DashboardPeopleRoute: typeof DashboardPeopleRoute
  DashboardReportsRoute: typeof DashboardReportsRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardChatRoute: DashboardChatRoute,
  DashboardDashboardRoute: DashboardDashboardRoute,
  DashboardEvidenceManagementRoute: DashboardEvidenceManagementRoute,
  DashboardPeopleRoute: DashboardPeopleRoute,
  DashboardReportsRoute: DashboardReportsRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/chat': typeof DashboardChatRoute
  '/dashboard/dashboard': typeof DashboardDashboardRoute
  '/dashboard/evidence-management': typeof DashboardEvidenceManagementRoute
  '/dashboard/people': typeof DashboardPeopleRoute
  '/dashboard/reports': typeof DashboardReportsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/chat': typeof DashboardChatRoute
  '/dashboard/dashboard': typeof DashboardDashboardRoute
  '/dashboard/evidence-management': typeof DashboardEvidenceManagementRoute
  '/dashboard/people': typeof DashboardPeopleRoute
  '/dashboard/reports': typeof DashboardReportsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/chat': typeof DashboardChatRoute
  '/dashboard/dashboard': typeof DashboardDashboardRoute
  '/dashboard/evidence-management': typeof DashboardEvidenceManagementRoute
  '/dashboard/people': typeof DashboardPeopleRoute
  '/dashboard/reports': typeof DashboardReportsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/dashboard'
    | '/dashboard/chat'
    | '/dashboard/dashboard'
    | '/dashboard/evidence-management'
    | '/dashboard/people'
    | '/dashboard/reports'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/dashboard'
    | '/dashboard/chat'
    | '/dashboard/dashboard'
    | '/dashboard/evidence-management'
    | '/dashboard/people'
    | '/dashboard/reports'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/dashboard'
    | '/dashboard/chat'
    | '/dashboard/dashboard'
    | '/dashboard/evidence-management'
    | '/dashboard/people'
    | '/dashboard/reports'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRoute
  DashboardRoute: typeof DashboardRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  DashboardRoute: DashboardRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/dashboard"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth": {
      "filePath": "auth.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/chat",
        "/dashboard/dashboard",
        "/dashboard/evidence-management",
        "/dashboard/people",
        "/dashboard/reports"
      ]
    },
    "/dashboard/chat": {
      "filePath": "dashboard/chat.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/dashboard": {
      "filePath": "dashboard/dashboard.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/evidence-management": {
      "filePath": "dashboard/evidence-management.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/people": {
      "filePath": "dashboard/people.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/reports": {
      "filePath": "dashboard/reports.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
